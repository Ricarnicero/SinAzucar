{"version":3,"sources":["../node_modules/process/browser.js","../node_modules/@firebase/database/dist/index.cjs.js","../node_modules/@firebase/database/node_modules/tslib/tslib.es6.js","../node_modules/firebase/database/dist/index.esm.js"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","Object","defineProperty","value","ex","firebase","__webpack_require__","tslib","util","logger$1","component","DOMStorageWrapper","domStorage_","prefix_","set","key","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","varArgs","_i","message","arg","isArray","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","__spread","error","fatal","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","sort","splitStringBySize","segsize","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","stack","beingCrawled","search","setTimeoutNonBlocking","time","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","enumerable","configurable","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","ValidationPath","path","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","domain","indexOf","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","location","protocol","scheme","repoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","e_1","_a","results","charAt","_b","__values","_c","next","done","segment","kv","e_1_1","return","decodeQuery","parts","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","_super","__extends","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","root","base12","buildPennant","chunkSize","low","high","childTree","buildBalancedTree","namedNode","middle","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","__assign","newIndexes","addToIndexes","_this","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setMaxNode$1","USE_HINZE","nodeFromJSON$1","json","node_1","childData","children_1","childrenHavePriority_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","forEach","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","otherKey","thisKey","every","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","validateContextObject","removeEventCallbackForQuery","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","SparseSnapshotTree","children","Map","find","size","childKey","has","remember","clear","forget","self_1","tree","delete","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","Empty","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","values","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","e_2","removed","hadCompleteView","hasCompleteView","entries","_d","__read","viewQueryId","e_2_1","getQueryViews","e_3","e_3_1","e_4","e_4_1","viewForQuery","getCompleteView","viewExistsForQuery","e_5","e_5_1","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","code","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","authProvider_","auth_","getImmediate","then","auth","getToken","forceRefresh","Promise","addTokenChangeListener","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","notifyForInvalidToken","errorMessage","options","StatsCollection","counters_","incrementCounter","amount","deepCopy","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","add","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","document","addEventListener","visible_","getInstance","OnlineMonitor","online_","isMobileCordova","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","called_1","wrappedFn_1","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","CONSTANTS","NODE_ADMIN","headers","User-Agent","platform","NODE_ENV","PUBLIC_URL","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","token_1","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","console","_e","_f","clientName","NODE_CLIENT","isReactNative","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","Repo","forceRestClient","app","authProvider","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactionsInit_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","dbEmulatorHost","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","__awaiter","__generator","freeze","__proto__","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","_forceRestClient","registerDatabase","instance","setSDKVersion","registerComponent","Component","getProvider","setServiceProps","setMultipleInstances","registerVersion","__webpack_exports__","_assign","__rest","__decorate","__param","__metadata","__exportStar","__spreadArrays","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","_extendStatics","setPrototypeOf","__","constructor","create","assign","getOwnPropertySymbols","propertyIsEnumerable","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","paramIndex","decorator","metadataKey","metadataValue","metadata","thisArg","_arguments","P","generator","fulfilled","step","rejected","y","g","_","label","sent","trys","ops","verb","throw","Symbol","TypeError","o","ar","il","jl","asyncIterator","fulfill","settle","cooked","mod","__esModule","default"],"mappings":"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","file":"static/js/3.64cfe88c.chunk.js","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n}; // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n  return [];\n};\n\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n  return '/';\n};\n\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\n\nprocess.umask = function () {\n  return 0;\n};","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar firebase = _interopDefault(require('@firebase/app'));\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n\nvar component = require('@firebase/component');\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\n\n\nvar DOMStorageWrapper =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param {string} key The key to save the value under\r\n   * @param {?Object} value The value being stored, or null to remove the key.\r\n   */\n\n\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   * @return {*} The value that was stored under this key, or null\r\n   */\n\n\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return util.jsonEval(storedVal);\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   */\n\n\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  /**\r\n   * @param {string} name\r\n   * @return {string}\r\n   */\n\n\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n\n  return DOMStorageWrapper;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\n\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n\n  MemoryStorage.prototype.get = function (key) {\n    if (util.contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  };\n\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n\n  return MemoryStorage;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\n\n\nvar createStoragefor = function createStoragefor(domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nvar SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logClient = new logger$1.Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\n\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\n\n\nvar sha1 = function sha1(str) {\n  var utf8Bytes = util.stringToByteArray(str);\n  var sha1 = new util.Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return util.base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} varArgs\r\n * @return {string}\r\n * @private\r\n */\n\n\nvar buildLogMessage_ = function buildLogMessage_() {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = '';\n\n  for (var i = 0; i < varArgs.length; i++) {\n    var arg = varArgs[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += util.stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\n\n\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\n\nvar enableLogging = function enableLogging(logger_, persistent) {\n  util.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = logger$1.LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} varArgs\r\n */\n\n\nvar log = function log() {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    var message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\n\n\nvar logWrapper = function logWrapper(prefix) {\n  return function () {\n    var varArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n\n    log.apply(void 0, tslib.__spread([prefix], varArgs));\n  };\n};\n/**\r\n * @param {...string} varArgs\r\n */\n\n\nvar error = function error() {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.error(message);\n};\n/**\r\n * @param {...string} varArgs\r\n */\n\n\nvar fatal = function fatal() {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.error(message);\n  throw new Error(message);\n};\n/**\r\n * @param {...*} varArgs\r\n */\n\n\nvar warn = function warn() {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nvar warnIfPageIsSecure = function warnIfPageIsSecure() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\n\n\nvar isInvalidJSONNumber = function isInvalidJSONNumber(data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\n\n\nvar executeWhenDOMReady = function executeWhenDOMReady(fn) {\n  if (util.isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n\n    var wrappedFn_1 = function wrappedFn_1() {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn_1, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') {\n          wrappedFn_1();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\n\n\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\n\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\n\nvar nameCompare = function nameCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n        bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\n\n\nvar stringCompare = function stringCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\n\n\nvar requireKey = function requireKey(key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\n  }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\n\n\nvar ObjectToUniqueKey = function ObjectToUniqueKey(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return util.stringify(obj);\n  }\n\n  var keys = []; // eslint-disable-next-line guard-for-in\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += util.stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\n\n\nvar splitStringBySize = function splitStringBySize(str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj The object or array to iterate over\r\n * @param fn The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\n\n\nvar doubleToIEEE754String = function doubleToIEEE754String(v) {\n  util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1;\n  var s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  var bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  var str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\n\n\nvar isChromeExtensionContentScript = function isChromeExtensionContentScript() {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\n\n\nvar isWindowsStoreApp = function isWindowsStoreApp() {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\n\n\nvar errorForServerCode = function errorForServerCode(code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\n\nvar tryParseInt = function tryParseInt(str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\n\n\nvar exceptionGuard = function exceptionGuard(fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\n\n\nvar beingCrawled = function beingCrawled() {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\n\n\nvar setTimeoutNonBlocking = function setTimeoutNonBlocking(fn, time) {\n  var timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\n\nvar Path =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string|Array.<string>} pathOrString Path string to parse,\r\n   *      or another path, or the raw tokens array\r\n   * @param {number=} pieceNum\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      var copyTo = 0;\n\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  Object.defineProperty(Path, \"Empty\", {\n    /**\r\n     * Singleton to represent an empty path\r\n     *\r\n     * @const\r\n     */\n    get: function get() {\n      return new Path('');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Path.prototype.getFront = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  };\n  /**\r\n   * @return {number} The number of segments in this path\r\n   */\n\n\n  Path.prototype.getLength = function () {\n    return this.pieces_.length - this.pieceNum_;\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.popFront = function () {\n    var pieceNum = this.pieceNum_;\n\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n\n    return new Path(this.pieces_, pieceNum);\n  };\n  /**\r\n   * @return {?string}\r\n   */\n\n\n  Path.prototype.getBack = function () {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  };\n\n  Path.prototype.toString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  };\n\n  Path.prototype.toUrlEncodedString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  };\n  /**\r\n   * Shallow copy of the parts of the path.\r\n   *\r\n   * @param {number=} begin\r\n   * @return {!Array<string>}\r\n   */\n\n\n  Path.prototype.slice = function (begin) {\n    if (begin === void 0) {\n      begin = 0;\n    }\n\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  };\n  /**\r\n   * @return {?Path}\r\n   */\n\n\n  Path.prototype.parent = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @param {string|!Path} childPathObj\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.child = function (childPathObj) {\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      var childPieces = childPathObj.split('/');\n\n      for (var i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @return {boolean} True if there are no segments in this path\r\n   */\n\n\n  Path.prototype.isEmpty = function () {\n    return this.pieceNum_ >= this.pieces_.length;\n  };\n  /**\r\n   * @param {!Path} outerPath\r\n   * @param {!Path} innerPath\r\n   * @return {!Path} The path from outerPath to innerPath\r\n   */\n\n\n  Path.relativePath = function (outerPath, innerPath) {\n    var outer = outerPath.getFront(),\n        inner = innerPath.getFront();\n\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n    }\n  };\n  /**\r\n   * @param {!Path} left\r\n   * @param {!Path} right\r\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n   */\n\n\n  Path.comparePaths = function (left, right) {\n    var leftKeys = left.slice();\n    var rightKeys = right.slice();\n\n    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  };\n  /**\r\n   *\r\n   * @param {Path} other\r\n   * @return {boolean} true if paths are the same.\r\n   */\n\n\n  Path.prototype.equals = function (other) {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   *\r\n   * @param {!Path} other\r\n   * @return {boolean} True if this path is a parent (or the same as) other\r\n   */\n\n\n  Path.prototype.contains = function (other) {\n    var i = this.pieceNum_;\n    var j = other.pieceNum_;\n\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n\n      ++i;\n      ++j;\n    }\n\n    return true;\n  };\n\n  return Path;\n}(); // end Path\n\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nvar ValidationPath =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path Initial Path.\r\n   * @param {string} errorPrefix_ Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    /** @type {!Array<string>} */\n\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += util.stringLength(this.parts_[i]);\n    }\n\n    this.checkValid_();\n  }\n\n  Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n    /** @const {number} Maximum key depth. */\n    get: function get() {\n      return 32;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n    /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n    get: function get() {\n      return 768;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @param {string} child */\n\n  ValidationPath.prototype.push = function (child) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n\n    this.parts_.push(child);\n    this.byteLength_ += util.stringLength(child);\n    this.checkValid_();\n  };\n\n  ValidationPath.prototype.pop = function () {\n    var last = this.parts_.pop();\n    this.byteLength_ -= util.stringLength(last); // Un-count the previous '/'\n\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  };\n\n  ValidationPath.prototype.checkValid_ = function () {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');\n    }\n\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());\n    }\n  };\n  /**\r\n   * String for use in error messages - uses '.' notation for path.\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  ValidationPath.prototype.toErrorString = function () {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  };\n\n  return ValidationPath;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\nvar FORGE_DOMAIN = 'firebaseio.com';\nvar LAST_SESSION_PARAM = 'ls';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\n\nvar RepoInfo =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} host Hostname portion of the url for the repo\r\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n   * @param {string} namespace The namespace represented by the repo\r\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param {string=} persistenceKey Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey, includeNamespaceInQueryParams) {\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n\n    if (includeNamespaceInQueryParams === void 0) {\n      includeNamespaceInQueryParams = false;\n    }\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost || this.isCustomHost() || this.includeNamespaceInQueryParams;\n  };\n\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\r\n   * Returns the websocket URL for this repo\r\n   * @param {string} type of connection\r\n   * @param {Object} params list\r\n   * @return {string} The URL for this repo\r\n   */\n\n\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    util.assert(typeof type === 'string', 'typeof type must == string');\n    util.assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n\n    if (type === WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    var pairs = [];\n    each(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toURLString = function () {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  };\n\n  return RepoInfo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\n\n\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  var e_1, _a;\n\n  var results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  try {\n    for (var _b = tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var segment = _c.value;\n\n      if (segment.length === 0) {\n        continue;\n      }\n\n      var kv = segment.split('=');\n\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return results;\n}\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\n\n\nvar parseRepoInfo = function parseRepoInfo(dataURL) {\n  var parsedUrl = parseDatabaseURL(dataURL),\n      namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\r\n */\n\n\nvar parseDatabaseURL = function parseDatabaseURL(dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  var secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    var slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    var questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    var parts = host.split('.');\n\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase(); // We interpret the subdomain of a 3 component URL as the namespace name.\n\n      namespace = subdomain;\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString,\n    namespace: namespace\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\n\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\n\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\n\nvar isValidKey = function isValidKey(key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidPathString = function isValidPathString(pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidRootPathString = function isValidRootPathString(pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\n\n\nvar isValidPriority = function isValidPriority(priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  util.contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseDataArg = function validateFirebaseDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\n\n\nvar validateFirebaseData = function validateFirebaseData(errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && util.stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false;\n    var hasActualChild_1 = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + path.toErrorString() + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\n\n\nvar validateFirebaseMergePaths = function validateFirebaseMergePaths(errorPrefix, mergePaths) {\n  var i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = curPath.slice();\n\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(Path.comparePaths);\n  var prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseMergeDataArg = function validateFirebaseMergeDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix + ' must be an object containing the children to replace.');\n  }\n\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nvar validatePriority = function validatePriority(fnName, argumentNumber, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nvar validateEventType = function validateEventType(fnName, argumentNumber, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n\n    default:\n      throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\nvar validateKey = function validateKey(fnName, argumentNumber, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n\nvar validatePathString = function validatePathString(fnName, argumentNumber, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nvar validateRootPathString = function validateRootPathString(fnName, argumentNumber, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nvar validateWritablePath = function validateWritablePath(fnName, path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nvar validateUrl = function validateUrl(fnName, argumentNumber, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\nvar validateBoolean = function validateBoolean(fnName, argumentNumber, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n\n  if (typeof bool !== 'boolean') {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n */\n\n\nvar OnDisconnect =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Repo} repo_\r\n   * @param {!Path} path_\r\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.remove = function (onComplete) {\n    util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    util.validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {number|string|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    util.validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n\n  return OnDisconnect;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TransactionResult =\n/** @class */\nfunction () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   * @constructor\r\n   * @dict\r\n   * @param {boolean} committed\r\n   * @param {DataSnapshot} snapshot\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  TransactionResult.prototype.toJSON = function () {\n    util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n\n  return TransactionResult;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\n\nvar nextPushId = function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'; // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n\n  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    util.assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    util.assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar NamedNode =\n/** @class */\nfunction () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  /**\r\n   *\r\n   * @param {!string} name\r\n   * @param {!Node} node\r\n   * @return {NamedNode}\r\n   */\n\n\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n\n  return NamedNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @constructor\r\n */\n\n\nvar Index =\n/** @class */\nfunction () {\n  function Index() {}\n  /**\r\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n   * this index\r\n   */\n\n\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   * @param {!Node} oldNode\r\n   * @param {!Node} newNode\r\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  Index.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n\n  return Index;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __EMPTY_NODE;\n\nvar KeyIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(KeyIndex, _super);\n\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function get() {\n      return __EMPTY_NODE;\n    },\n    set: function set(val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @inheritDoc\r\n   */\n\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n\n  return KeyIndex;\n}(Index);\n\nvar KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MAX_NODE;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\n\n\nvar priorityHashText = function priorityHashText(priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\n\n\nvar validatePriorityNode = function validatePriorityNode(priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    util.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util.contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nvar LeafNode =\n/** @class */\nfunction () {\n  /**\r\n   * @implements {Node}\r\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n   *                                         The object type is possible in the event of a deferred value\r\n   * @param {!Node=} priorityNode_ The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function get() {\n      return __childrenNodeConstructor;\n    },\n    set: function set(val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getChild = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n\n      var type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @return {Object|string|number|boolean} The value of the node.\r\n   */\n\n\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      util.assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   * @param {!LeafNode} otherLeaf\r\n   * @return {!number}\r\n   * @private\r\n   */\n\n\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.equals = function (other) {\n    /**\r\n     * @inheritDoc\r\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   * @type {Array.<!string>}\r\n   * @const\r\n   */\n\n\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar nodeFromJSON;\nvar MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$1 = val;\n}\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\n\nvar PriorityIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PriorityIndex, _super);\n\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n\n  return PriorityIndex;\n}(Index);\n\nvar PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V, T\r\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n   * @param {?K} startKey\r\n   * @param {function(K, K): number} comparator\r\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n   * @param {(function(K, V):T)=} resultGenerator_\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    /** @private\r\n     * @type {Array.<!LLRBNode>}\r\n     */\n\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_.pop();\n    var result;\n\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {!K} key Key associated with this node.\r\n   * @param {!V} value Value associated with this node.\r\n   * @param {?boolean} color Whether this node is red.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param {?K} key New key for the node, or null.\r\n   * @param {?V} value New value for the node, or null.\r\n   * @param {?boolean} color New color for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n   * @return {!LLRBNode} The node copy.\r\n   */\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {*} True if traversal was aborted.\r\n   */\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @return {!Object} The minimum node in the tree.\r\n   * @private\r\n   */\n\n\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Object} key Key to insert.\r\n   * @param {!Object} value Value to insert.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with the key/value added.\r\n   */\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var n = this;\n    var cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n   */\n\n\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    var n = this;\n\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param {!Object} key The key of the item to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n   */\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this is a RED node.\r\n   */\n\n\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree after performing any needed rotations.\r\n   */\n\n\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedLeft.\r\n   */\n\n\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedRight.\r\n   */\n\n\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateLeft.\r\n   */\n\n\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateRight.\r\n   */\n\n\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after colorFlip.\r\n   */\n\n\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @private\r\n   * @return {boolean} True if all is well.\r\n   */\n\n\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBNode.prototype.check_ = function () {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    var blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @return {!LLRBEmptyNode} The node copy.\r\n   */\n\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with item added.\r\n   */\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBEmptyNode} New tree, with item removed.\r\n   */\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this node is red.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nvar SortedMap =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {function(K, K):number} comparator_ Key comparator.\r\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @return {!SortedMap.<K, V>} New map, with item added.\r\n   */\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @return {!SortedMap.<K, V>} New map, with item removed.\r\n   */\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param {!K} key The key to look up.\r\n   * @return {?V} The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param {K} key The key to find the predecessor of\r\n   * @return {?K} The predecessor key.\r\n   */\n\n\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @return {boolean} True if the map is empty.\r\n   */\n\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @return {number} The total number of nodes in the map.\r\n   */\n\n\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @return {?K} The minimum key in the map.\r\n   */\n\n\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @return {?K} The maximum key in the map.\r\n   */\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} True if the traversal was aborted.\r\n   */\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @template T\r\n   * @param {(function(K, V):T)=} resultGenerator\r\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n   */\n\n\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   * @const\r\n   */\n\n\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_2 = Math.log(2);\n/**\r\n * @constructor\r\n */\n\nvar Base12Num =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} length\r\n   */\n  function Base12Num(length) {\n    var logBase2 = function logBase2(num) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n\n    var bitMask = function bitMask(bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\n\n\nvar buildChildSet = function buildChildSet(childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  var buildBalancedTree = function buildBalancedTree(low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  var buildFrom12Array = function buildFrom12Array(base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n\n    var buildPennant = function buildPennant(chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    var attachPennant = function attachPennant(pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _defaultIndexMap;\n\nvar fallbackObject = {};\n\nvar IndexMap =\n/** @class */\nfunction () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\n    get: function get() {\n      util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = util.safeGet(this.indexes_, indexKey);\n\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  };\n\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return util.contains(this.indexSet_, indexDefinition.toString());\n  };\n\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    var newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    var indexName = indexDefinition.toString();\n\n    var newIndexSet = tslib.__assign({}, this.indexSet_);\n\n    newIndexSet[indexName] = indexDefinition;\n\n    var newIndexes = tslib.__assign({}, this.indexes_);\n\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n\n\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n\n    var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\n      var index = util.safeGet(_this.indexSet_, indexName);\n      util.assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n\n\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = util.map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n\n  return IndexMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\n\nvar ChildrenNode =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!SortedMap.<string, !Node>} children_ List of children\r\n   * of this node..\r\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n   * @param {!IndexMap} indexMap_\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function get() {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    util.assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n          newIndexMap = void 0;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    var obj = {};\n    var numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = []; // eslint-disable-next-line guard-for-in\n\n      for (var key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n\n      if (!this.getPriority().isEmpty()) {\n        toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n\n        if (childHash !== '') {\n          toHash_1 += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n  /**\r\n   *\r\n   * @param {!NamedNode} startPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n  /**\r\n   * @param {!NamedNode} endPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE$2) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   * @private\r\n   * @param {!Index} indexDefinition\r\n   * @return {?SortedMap.<NamedNode, Node>}\r\n   */\n\n\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n  /**\r\n   * @private\r\n   * @type {RegExp}\r\n   */\n\n\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\n\n\nvar MaxNode =\n/** @class */\nfunction (_super) {\n  tslib.__extends(MaxNode, _super);\n\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\n\n\nvar MAX_NODE$2 = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE$2)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE$2);\nsetMaxNode$1(MAX_NODE$2);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\n\nfunction nodeFromJSON$1(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  util.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON$1(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children_1.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (util.contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON$1(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node_1 = node_1.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON$1(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON$1);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\nvar ValueIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ValueIndex, _super);\n\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.maxPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n\n  return ValueIndex;\n}(Index);\n\nvar VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\n\nvar PathIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PathIndex, _super);\n\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n\n    _this.indexPath_ = indexPath_;\n    util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  /**\r\n   * @param {!Node} snap\r\n   * @return {!Node}\r\n   * @protected\r\n   */\n\n\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\n    return new NamedNode(MAX_NAME, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.toString = function () {\n    return this.indexPath_.slice().join('/');\n  };\n\n  return PathIndex;\n}(Index);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\n\n\nvar DataSnapshot =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_ A SnapshotNode to wrap.\r\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n   * @param {!Index} index_ The iteration order for this snapshot\r\n   */\n  function DataSnapshot(node_, ref_, index_) {\n    this.node_ = node_;\n    this.ref_ = ref_;\n    this.index_ = index_;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.val = function () {\n    util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.exportVal = function () {\n    util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n   */\n\n\n  DataSnapshot.prototype.exists = function () {\n    util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {!DataSnapshot} DataSnapshot for child node.\r\n   */\n\n\n  DataSnapshot.prototype.child = function (childPathString) {\n    util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)\n\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    var childRef = this.ref_.child(childPath);\n    return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {boolean} Whether the child exists.\r\n   */\n\n\n  DataSnapshot.prototype.hasChild = function (childPathString) {\n    util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @return {string|number|null} The priority.\r\n   */\n\n\n  DataSnapshot.prototype.getPriority = function () {\n    util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length); // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n\n    return this.node_.getPriority().val();\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param {function(!DataSnapshot)} action Callback function to be called\r\n   * for each child.\r\n   * @return {boolean} True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n\n    util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    util.validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    var childrenNode = this.node_; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this.index_, function (key, node) {\n      return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.hasChildren = function () {\n    util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function get() {\n      return this.ref_.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @return {number} The number of children that this DataSnapshot contains.\r\n   */\n\n  DataSnapshot.prototype.numChildren = function () {\n    util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this.node_.numChildren();\n  };\n  /**\r\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n   */\n\n\n  DataSnapshot.prototype.getRef = function () {\n    util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return this.ref_;\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\n\n\nvar DataEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n   * @param {!DataSnapshot} snapshot The data backing the event\r\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.getRef();\n\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + util.stringify(this.snapshot.exportVal());\n  };\n\n  return DataEvent;\n}();\n\nvar CancelEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {EventRegistration} eventRegistration\r\n   * @param {Error} error\r\n   * @param {!Path} path\r\n   */\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n\n  return CancelEvent;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nvar ValueEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?function(!DataSnapshot)} callback_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {?Object} context_\r\n   */\n  function ValueEventRegistration(callback_, cancelCallback_, context_) {\n    this.callback_ = callback_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_1 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_1.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_1 = this.callback_;\n      return function () {\n        cb_1.call(ctx, eventData.snapshot);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callback_ === this.callback_ && other.context_ === this.context_;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callback_ !== null;\n  };\n\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\n\n\nvar ChildEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {Object=} context_\r\n   */\n  function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n    this.callbacks_ = callbacks_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return util.contains(this.callbacks_, eventToCheck);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    util.assert(change.childName != null, 'Child events should have a childName.');\n    var ref = query.getRef().child(\n    /** @type {!string} */\n    change.childName);\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_2 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_2.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_2 = this.callbacks_[eventData.eventType];\n      return function () {\n        cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.matches = function (other) {\n    var _this = this;\n\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        var otherKeys = Object.keys(other.callbacks_);\n        var thisKeys = Object.keys(this.callbacks_);\n        var otherCount = otherKeys.length;\n        var thisCount = thisKeys.length;\n\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n          if (otherCount === 1) {\n            var otherKey = otherKeys[0];\n            var thisKey = thisKeys[0];\n            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(function (eventType) {\n              return other.callbacks_[eventType] === _this.callbacks_[eventType];\n            });\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbacks_ !== null;\n  };\n\n  return ChildEventRegistration;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor;\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\n\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(repo, path, queryParams_, orderByCalled_) {\n    this.repo = repo;\n    this.path = path;\n    this.queryParams_ = queryParams_;\n    this.orderByCalled_ = orderByCalled_;\n  }\n\n  Object.defineProperty(Query, \"__referenceConstructor\", {\n    get: function get() {\n      util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\n      return __referenceConstructor;\n    },\n    set: function set(val) {\n      __referenceConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates start/end values for queries.\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n  Query.validateQueryEndpoints_ = function (params) {\n    var startNode = null;\n    var endNode = null;\n\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n      var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';\n\n      if (params.hasStart()) {\n        var startName = params.getIndexStartName();\n\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n\n      if (params.hasEnd()) {\n        var endName = params.getIndexEndName();\n\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n        throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n      }\n    } else {\n      util.assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n      if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n        throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');\n      }\n    }\n  };\n  /**\r\n   * Validates that limit* has been called with the correct combination of parameters\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n\n  Query.validateLimit_ = function (params) {\n    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n      throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n    }\n  };\n  /**\r\n   * Validates that no other order by call has been made\r\n   * @param {!string} fnName\r\n   * @private\r\n   */\n\n\n  Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   */\n\n\n  Query.prototype.getQueryParams = function () {\n    return this.queryParams_;\n  };\n  /**\r\n   * @return {!Reference}\r\n   */\n\n\n  Query.prototype.getRef = function () {\n    util.validateArgCount('Query.ref', 0, 0, arguments.length); // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n\n    return new Query.__referenceConstructor(this.repo, this.path);\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @param {!function(DataSnapshot, string=)} callback\r\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n   * @param {Object=} context\r\n   * @return {!function(DataSnapshot, string=)}\r\n   */\n\n\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    util.validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    util.validateCallback('Query.on', 2, callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      var callbacks = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n\n    return callback;\n  };\n  /**\r\n   * @param {!function(!DataSnapshot)} callback\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n    var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n    var container = new ChildEventRegistration(callbacks, cancelCallback, context);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {string=} eventType\r\n   * @param {(function(!DataSnapshot, ?string=))=} callback\r\n   * @param {Object=} context\r\n   */\n\n\n  Query.prototype.off = function (eventType, callback, context) {\n    util.validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    util.validateCallback('Query.off', 2, callback, true);\n    util.validateContextObject('Query.off', 3, context, true);\n    var container = null;\n    var callbacks = null;\n\n    if (eventType === 'value') {\n      var valueCallback = callback || null;\n      container = new ValueEventRegistration(valueCallback, null, context || null);\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n\n    this.repo.removeEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   * @param {!string} eventType\r\n   * @param {!function(!DataSnapshot, string=)} userCallback\r\n   * @param failureCallbackOrContext\r\n   * @param context\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {\n    var _this = this;\n\n    util.validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    util.validateCallback('Query.once', 2, userCallback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context); // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n\n    var firstCall = true;\n    var deferred = new util.Deferred(); // A dummy error handler in case a user wasn't expecting promises\n\n    deferred.promise.catch(function () {});\n\n    var onceCallback = function onceCallback(snapshot) {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n\n        _this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(eventType, onceCallback,\n    /*cancel=*/\n    function (err) {\n      _this.off(eventType, onceCallback);\n\n      if (ret.cancel) {\n        ret.cancel.bind(ret.context)(err);\n      }\n\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToFirst = function (limit) {\n    util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToLast = function (limit) {\n    util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToLast: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   * @param {!string} path\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByChild = function (path) {\n    util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n\n    if (path === '$key') {\n      throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n    } else if (path === '$priority') {\n      throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n    } else if (path === '$value') {\n      throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n    }\n\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    var parsedPath = new Path(path);\n\n    if (parsedPath.isEmpty()) {\n      throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n    }\n\n    var index = new PathIndex(parsedPath);\n    var newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByKey = function () {\n    util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    var newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByPriority = function () {\n    util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByValue = function () {\n    util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    var newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n    var newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');\n    } // Calling with no params tells us to start at the beginning.\n\n\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n    var newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   * @param {number|string|boolean|null} value\r\n   * @param {string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.equalTo = function (value, name) {\n    util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');\n    }\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return this.startAt(value, name).endAt(value, name);\n  };\n  /**\r\n   * @return {!string} URL for this location.\r\n   */\n\n\n  Query.prototype.toString = function () {\n    util.validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n\n\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  };\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   * @return {!Object}\r\n   */\n\n\n  Query.prototype.queryObject = function () {\n    return this.queryParams_.getQueryObject();\n  };\n  /**\r\n   * @return {!string}\r\n   */\n\n\n  Query.prototype.queryIdentifier = function () {\n    var obj = this.queryObject();\n    var id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   * @param {Query} other\r\n   * @return {boolean}\r\n   */\n\n\n  Query.prototype.isEqual = function (other) {\n    util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\n\n    if (!(other instanceof Query)) {\n      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    var sameRepo = this.repo === other.repo;\n    var samePath = this.path.equals(other.path);\n    var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param {!string} fnName The function name (on or once)\r\n   * @param {(function(Error)|Object)=} cancelOrContext\r\n   * @param {Object=} context\r\n   * @return {{cancel: ?function(Error), context: ?Object}}\r\n   * @private\r\n   */\n\n\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: null,\n      context: null\n    };\n\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      util.validateCallback(fnName, 3, ret.cancel, true);\n      ret.context = context;\n      util.validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(util.errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');\n      }\n    }\n\n    return ret;\n  };\n\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Query;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n */\n\n\nvar SparseSnapshotTree =\n/** @class */\nfunction () {\n  function SparseSnapshotTree() {\n    this.value = null;\n    this.children = new Map();\n  }\n  /**\r\n   * Gets the node stored at the given path if one exists.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return The retrieved node, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.find = function (path) {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      var childKey = path.getFront();\n      path = path.popFront();\n\n      if (this.children.has(childKey)) {\n        var childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Stores the given node at the specified path. If there is already a node\r\n   * at a shallower path, it merges the new data into that snapshot node.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @param data The new data, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.remember = function (path, data) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      var childKey = path.getFront();\n\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      var child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  };\n  /**\r\n   * Purge the data at path from the cache.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return True if this node should now be removed.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forget = function (path) {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          var value = this.value;\n          this.value = null;\n          var self_1 = this;\n          value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n            self_1.remember(new Path(key), tree);\n          });\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        var childKey = path.getFront();\n        path = path.popFront();\n\n        if (this.children.has(childKey)) {\n          var safeToRemove = this.children.get(childKey).forget(path);\n\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\r\n   * Recursively iterates through all of the stored tree and calls the\r\n   * callback on each one.\r\n   *\r\n   * @param prefixPath Path to look up node for.\r\n   * @param func The function to invoke for each tree.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild(function (key, tree) {\n        var path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  };\n  /**\r\n   * Iterates through each immediate child and triggers the callback.\r\n   *\r\n   * @param func The function to invoke for each child.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachChild = function (func) {\n    this.children.forEach(function (tree, key) {\n      func(key, tree);\n    });\n  };\n\n  return SparseSnapshotTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\n\n\nvar generateWithValues = function generateWithValues(values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\n\n\nvar resolveDeferredValue = function resolveDeferredValue( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nserverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  } else {\n    util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\n\n\nvar resolveDeferredValueTree = function resolveDeferredValueTree(tree, serverValues) {\n  var resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function (path, node) {\n    resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\n  });\n  return resolvedTree;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\n\n\nvar resolveDeferredValueSnapshot = function resolveDeferredValueSnapshot(node, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredValue(rawPri, serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredValue(leafNode.getValue(), serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON$1(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\n\n\nvar OperationSource =\n/** @class */\nfunction () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n\n  OperationSource.User = new OperationSource(\n  /*fromUser=*/\n  true, false, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n  OperationSource.Server = new OperationSource(false,\n  /*fromServer=*/\n  true, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @param {string} queryId\r\n   * @return {!OperationSource}\r\n   */\n\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false,\n    /*fromServer=*/\n    true, queryId,\n    /*tagged=*/\n    true);\n  };\n\n  return OperationSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AckUserWrite =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n   * @param {!boolean} revert\r\n   */\n  function AckUserWrite(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = OperationSource.User;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  };\n\n  return AckUserWrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\n\nvar EmptyChildren = function EmptyChildren() {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nvar ImmutableTree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {?T} value\r\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n   */\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n\n    this.value = value;\n    this.children = children;\n  }\n  /**\r\n   * @template T\r\n   * @param {!Object.<string, !T>} obj\r\n   * @return {!ImmutableTree.<!T>}\r\n   */\n\n\n  ImmutableTree.fromObject = function (obj) {\n    var tree = ImmutableTree.Empty;\n    each(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   * @return {boolean}\r\n   */\n\n\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n   * on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param {!Path} relativePath The remainder of the path\r\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n   *   node\r\n   * @return {?{path:!Path, value:!T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: Path.Empty,\n        value: this.value\n      };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        var front = relativePath.getFront();\n        var child = this.children.get(front);\n\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n\n          if (childExistingPathAndValue != null) {\n            var fullPath = new Path(front).child(childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   * @param {!Path} relativePath\r\n   * @return {?{path: !Path, value: !T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @param {!Path} relativePath\r\n   * @return {!ImmutableTree.<T>} The subtree at the given path\r\n   */\n\n\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      var front = relativePath.getFront();\n      var childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to set value at.\r\n   * @param {?T} toSet Value to set.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.set(relativePath.popFront(), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to value to remove.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        var newChild = child.remove(relativePath.popFront());\n        var newChildren = void 0;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param {!Path} relativePath Path to get value for.\r\n   * @return {?T} Value at path, or null.\r\n   */\n\n\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param {!Path} relativePath Path to replace subtree for.\r\n   * @param {!ImmutableTree} newTree New tree.\r\n   * @return {!ImmutableTree} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.setTree(relativePath.popFront(), newTree);\n      var newChildren = void 0;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   * @template V\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   */\n\n\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(Path.Empty, fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   * @template V\r\n   * @param {!Path} pathSoFar\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   * @private\r\n   */\n\n\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   * @template V\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T):?V} f\r\n   * @return {?V}\r\n   */\n\n\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        var front = pathToFollow.getFront();\n        var nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T)} f\r\n   * @returns {!ImmutableTree.<T>}\r\n   */\n\n\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      var front = pathToFollow.getFront();\n      var nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param {function(!Path, !T)} f A function to be called with\r\n   *   the path from the root of the tree to a node, and the value at that node.\r\n   *   Called in depth-first order.\r\n   */\n\n\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n  /**\r\n   *\r\n   * @param {function(string, !T)} f\r\n   */\n\n\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  ImmutableTree.Empty = new ImmutableTree(null);\n  return ImmutableTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar ListenComplete =\n/** @class */\nfunction () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  };\n\n  return ListenComplete;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Overwrite =\n/** @class */\nfunction () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  };\n\n  return Overwrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n\n  return Merge;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nvar CacheNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_\r\n   * @param {boolean} fullyInitialized_\r\n   * @param {boolean} filtered_\r\n   */\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    var childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!string} key\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n  /**\r\n   * @return {!Node}\r\n   */\n\n\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n\n  return CacheNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\n\n\nvar ViewCache =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!CacheNode} eventCache_\r\n   * @param {!CacheNode} serverCache_\r\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\r\n   * @param {!Node} eventSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\r\n   * @param {!Node} serverSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\r\n   * @const\r\n   * @type {ViewCache}\r\n   */\n\n\n  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false), new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false));\n  return ViewCache;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\n\n\nvar Change =\n/** @class */\nfunction () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} newSnapshot\r\n   * @param {!Node} oldSnapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }; //event types\n\n  /** Event type for a child added */\n\n\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n\n  Change.VALUE = 'value';\n  return Change;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\n\n\nvar IndexedFilter =\n/** @class */\nfunction () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\n        } else {\n          util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  return IndexedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ChildChangeAccumulator =\n/** @class */\nfunction () {\n  function ChildChangeAccumulator() {\n    this.changeMap = new Map();\n  }\n\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey = change.childName;\n    util.assert(type === Change.CHILD_ADDED || type === Change.CHILD_CHANGED || type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      var oldType = oldChange.type;\n\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.delete(childKey);\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw util.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  };\n\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return Array.from(this.changeMap.values());\n  };\n\n  return ChildChangeAccumulator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\n\n\nvar NoCompleteChildSource_ =\n/** @class */\nfunction () {\n  function NoCompleteChildSource_() {}\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\n\n\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\n\nvar WriteTreeCompleteChildSource =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!WriteTreeRef} writes_\r\n   * @param {!ViewCache} viewCache_\r\n   * @param {?Node} optCompleteServerCache_\r\n   */\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.getEventCache();\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();\n    var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n\n  return WriteTreeCompleteChildSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar ProcessorResult =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Array.<!Change>} changes\r\n   */\n  function ProcessorResult(viewCache, changes) {\n    this.viewCache = viewCache;\n    this.changes = changes;\n  }\n\n  return ProcessorResult;\n}();\n/**\r\n * @constructor\r\n */\n\n\nvar ViewProcessor =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!NodeFilter} filter_\r\n   */\n  function ViewProcessor(filter_) {\n    this.filter_ = filter_;\n  }\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   */\n\n\n  ViewProcessor.prototype.assertIndexed = function (viewCache) {\n    util.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n    util.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @return {!ProcessorResult}\r\n   */\n\n\n  ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n    var accumulator = new ChildChangeAccumulator();\n    var newViewCache, filterServerNode;\n\n    if (operation.type === OperationType.OVERWRITE) {\n      var overwrite = operation;\n\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n\n        filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();\n        newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      var merge = operation;\n\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n        filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      var ackUserWrite = operation;\n\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n      } else {\n        newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n    } else {\n      throw util.assertionError('Unknown operation type: ' + operation.type);\n    }\n\n    var changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!ViewCache} newViewCache\r\n   * @param {!Array.<!Change>} accumulator\r\n   * @private\r\n   */\n\n\n  ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n    var eventSnap = newViewCache.getEventCache();\n\n    if (eventSnap.isFullyInitialized()) {\n      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n\n      if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(\n      /** @type {!Node} */\n      oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n        accumulator.push(Change.valueChange(\n        /** @type {!Node} */\n        newViewCache.getCompleteEventSnap()));\n      }\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} changePath\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!CompleteChildSource} source\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n    var oldEventSnap = viewCache.getEventCache();\n\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      var newEventCache = void 0,\n          serverNode = void 0;\n\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          var serverCache = viewCache.getCompleteServerSnap();\n          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n          var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n        } else {\n          var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n        }\n      } else {\n        var childKey = changePath.getFront();\n\n        if (childKey === '.priority') {\n          util.assert(changePath.getLength() === 1, \"Can't have a priority with additional path components\");\n          var oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode(); // we might have overwrites for this priority\n\n          var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          var childChangePath = changePath.popFront(); // update child\n\n          var newEventChild = void 0;\n\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n          }\n\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n\n      return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n    }\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    var oldServerSnap = oldViewCache.getServerCache();\n    var newServerCache;\n    var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();\n\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    } else {\n      var childKey = changePath.getFront();\n\n      if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n\n      var childChangePath = changePath.popFront();\n      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n      } else {\n        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n      }\n    }\n\n    var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    var oldEventSnap = oldViewCache.getEventCache();\n    var newViewCache, newEventCache;\n    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n      newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n    } else {\n      var childKey = changePath.getFront();\n\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n        newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n      } else {\n        var childChangePath = changePath.popFront();\n        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        var newChild = void 0;\n\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          var childNode = source.getCompleteChild(childKey);\n\n          if (childNode != null) {\n            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n\n        if (!oldChild.equals(newChild)) {\n          var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n          newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n\n    return newViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {string} childKey\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    var _this = this; // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!Node} node\r\n   * @param {ImmutableTree.<!Node>} merge\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n    merge.foreach(function (relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    var _this = this; // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n\n\n    if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {\n      return viewCache;\n    } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    var viewMergeTree;\n\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n\n    var serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (serverNode.hasChild(childKey)) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n      var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;\n\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childMergeTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} ackPath\r\n   * @param {!ImmutableTree<!boolean>} affectedTree\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    } // Only filter server node if it is currently filtered\n\n\n    var filterServerNode = viewCache.getServerCache().isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n\n    var serverCache = viewCache.getServerCache();\n\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n        return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        var changedChildren_1 = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n          changedChildren_1 = changedChildren_1.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      var changedChildren_2 = ImmutableTree.Empty;\n      affectedTree.foreach(function (mergePath, value) {\n        var serverCachePath = ackPath.child(mergePath);\n\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n        }\n      });\n      return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n    var oldServerNode = viewCache.getServerCache();\n    var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n    return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n    var complete;\n\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n      var oldEventCache = viewCache.getEventCache().getNode();\n      var newEventCache = void 0;\n\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        var newNode = void 0;\n\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n        } else {\n          var serverChildren = viewCache.getServerCache().getNode();\n          util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n          newNode = writesCache.calcCompleteEventChildren(serverChildren);\n        }\n\n        newNode = newNode;\n        newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n      } else {\n        var childKey = path.getFront();\n        var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n\n        if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n        } else {\n          newEventCache = oldEventCache;\n        }\n\n        if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n          }\n        }\n      }\n\n      complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n    }\n  };\n\n  return ViewProcessor;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\r\n     * @private\r\n     * @type {!Index}\r\n     */\n\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\r\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n   *\r\n   * Notes:\r\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n   *    our index.\r\n   *  - prevName will be calculated based on the index ordering.\r\n   *\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {!Array.<!EventRegistration>} eventRegistrations\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\r\n   * Given changes of a single change type, generate the corresponding events.\r\n   *\r\n   * @param {!Array.<!Event>} events\r\n   * @param {!string} eventType\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Array.<!EventRegistration>} registrations\r\n   * @param {!Node} eventCache\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\r\n   * @param {!Change} change\r\n   * @param {!Node} eventCache\r\n   * @return {!Change}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n      /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\r\n   * @param {!Change} a\r\n   * @param {!Change} b\r\n   * @return {number}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util.assertionError('Should only compare child_ events.');\n    }\n\n    var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n\n  return EventGenerator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   * @param {!ViewCache} initialViewCache\r\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\r\n     * @type {ViewProcessor}\r\n     * @private\r\n     */\n\n    this.processor_ = new ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache(); // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\r\n     * @type {!ViewCache}\r\n     * @private\r\n     */\n\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n    /**\r\n     * @type {!EventGenerator}\r\n     * @private\r\n     */\n\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  /**\r\n   * @return {!Query}\r\n   */\n\n\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\r\n   * @param {!EventRegistration} eventRegistration\r\n   */\n\n\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n   */\n\n\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n\n    if (cancelError) {\n      util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError\n        /** @type {!Error} */\n        = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      var remaining = [];\n\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n   *\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n      util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    util.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\r\n   * @param {!EventRegistration} registration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\r\n   * @private\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {EventRegistration=} eventRegistration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n\n  return View;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\n\nvar SyncPoint =\n/** @class */\nfunction () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n\n  Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n    get: function get() {\n      util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\n      return __referenceConstructor$1;\n    },\n    set: function set(val) {\n      util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\n      __referenceConstructor$1 = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SyncPoint.prototype.isEmpty = function () {\n    return this.views.size === 0;\n  };\n\n  SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n    var e_1, _a;\n\n    var queryId = operation.source.queryId;\n\n    if (queryId !== null) {\n      var view = this.views.get(queryId);\n      util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(operation, writesCache, optCompleteServerCache);\n    } else {\n      var events = [];\n\n      try {\n        for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var view = _c.value;\n          events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache Complete server cache, if we have it.\r\n   * @param {boolean} serverCacheComplete\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    var queryId = query.queryIdentifier();\n    var view = this.views.get(queryId);\n\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n      var eventCacheComplete = false;\n\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n\n      var viewCache = new ViewCache(new CacheNode(\n      /** @type {!Node} */\n      eventCache, eventCacheComplete, false), new CacheNode(\n      /** @type {!Node} */\n      serverCache, serverCacheComplete, false));\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    } // This is guaranteed to exist now, we just created anything that was missing\n\n\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  };\n  /**\r\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n   *\r\n   * If query is the default query, we'll check all views for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n   *\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n   */\n\n\n  SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var e_2, _a;\n\n    var queryId = query.queryIdentifier();\n    var removed = [];\n    var cancelEvents = [];\n    var hadCompleteView = this.hasCompleteView();\n\n    if (queryId === 'default') {\n      try {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (var _b = tslib.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = tslib.__read(_c.value, 2),\n              viewQueryId = _d[0],\n              view = _d[1];\n\n          cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n          if (view.isEmpty()) {\n            this.views.delete(viewQueryId); // We'll deal with complete views later.\n\n            if (!view.getQuery().getQueryParams().loadsAllData()) {\n              removed.push(view.getQuery());\n            }\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      var view = this.views.get(queryId);\n\n      if (view) {\n        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n        if (view.isEmpty()) {\n          this.views.delete(queryId); // We'll deal with complete views later.\n\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n    }\n\n    return {\n      removed: removed,\n      events: cancelEvents\n    };\n  };\n\n  SyncPoint.prototype.getQueryViews = function () {\n    var e_3, _a;\n\n    var result = [];\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (!view.getQuery().getQueryParams().loadsAllData()) {\n          result.push(view);\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return result;\n  };\n  /**\r\n   * @param path The path to the desired complete snapshot\r\n   * @return A complete cache, if it exists\r\n   */\n\n\n  SyncPoint.prototype.getCompleteServerCache = function (path) {\n    var e_4, _a;\n\n    var serverCache = null;\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        serverCache = serverCache || view.getCompleteServerCache(path);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return serverCache;\n  };\n\n  SyncPoint.prototype.viewForQuery = function (query) {\n    var params = query.getQueryParams();\n\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      var queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  };\n\n  SyncPoint.prototype.viewExistsForQuery = function (query) {\n    return this.viewForQuery(query) != null;\n  };\n\n  SyncPoint.prototype.hasCompleteView = function () {\n    return this.getCompleteView() != null;\n  };\n\n  SyncPoint.prototype.getCompleteView = function () {\n    var e_5, _a;\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (view.getQuery().getQueryParams().loadsAllData()) {\n          return view;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return null;\n  };\n\n  return SyncPoint;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nvar CompoundWrite =\n/** @class */\nfunction () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  CompoundWrite.prototype.addWrite = function (path, node) {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n      if (rootmost != null) {\n        var rootMostPath = rootmost.path;\n        var value = rootmost.value;\n        var relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        var subtree = new ImmutableTree(node);\n        var newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  };\n\n  CompoundWrite.prototype.addWrites = function (path, updates) {\n    var newWrite = this;\n    each(updates, function (childKey, node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  };\n  /**\r\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n   * location, which must be removed by calling this method with that path.\r\n   *\r\n   * @param path The path at which a write and all deeper writes should be removed\r\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n   */\n\n\n  CompoundWrite.prototype.removeWrite = function (path) {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  };\n  /**\r\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n   * considered \"complete\".\r\n   *\r\n   * @param path The path to check for\r\n   * @return Whether there is a complete write at that path\r\n   */\n\n\n  CompoundWrite.prototype.hasCompleteWrite = function (path) {\n    return this.getCompleteNode(path) != null;\n  };\n  /**\r\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n   * writes from deeper paths, but will return child nodes from a more shallow path.\r\n   *\r\n   * @param path The path to get a complete write\r\n   * @return The node if complete at that path, or null otherwise.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteNode = function (path) {\n    var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Returns all children that are guaranteed to be a complete overwrite.\r\n   *\r\n   * @return A list of all complete children.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteChildren = function () {\n    var children = [];\n    var node = this.writeTree_.value;\n\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n\n    return children;\n  };\n\n  CompoundWrite.prototype.childCompoundWrite = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      var shadowingNode = this.getCompleteNode(path);\n\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  };\n  /**\r\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n   * @return Whether this CompoundWrite is empty\r\n   */\n\n\n  CompoundWrite.prototype.isEmpty = function () {\n    return this.writeTree_.isEmpty();\n  };\n  /**\r\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n   * node\r\n   * @param node The node to apply this CompoundWrite to\r\n   * @return The node with all writes applied\r\n   */\n\n\n  CompoundWrite.prototype.apply = function (node) {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  };\n\n  CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\n  return CompoundWrite;\n}();\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite_1 = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite_1 = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTree =\n/** @class */\nfunction () {\n  function WriteTree() {\n    /**\r\n     * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n     * applyLocally=false or writes that are completely shadowed by other writes.\r\n     *\r\n     * @type {!CompoundWrite}\r\n     * @private\r\n     */\n    this.visibleWrites_ = CompoundWrite.Empty;\n    /**\r\n     * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n     * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n     * used by transactions).\r\n     *\r\n     * @type {!Array.<!WriteRecord>}\r\n     * @private\r\n     */\n\n    this.allWrites_ = [];\n    this.lastWriteId_ = -1;\n  }\n  /**\r\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTree.prototype.childWrites = function (path) {\n    return new WriteTreeRef(path, this);\n  };\n  /**\r\n   * Record a new overwrite from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} snap\r\n   * @param {!number} writeId\r\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n   */\n\n\n  WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * Record a new merge from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} writeId\r\n   */\n\n\n  WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * @param {!number} writeId\r\n   * @return {?WriteRecord}\r\n   */\n\n\n  WriteTree.prototype.getWrite = function (writeId) {\n    for (var i = 0; i < this.allWrites_.length; i++) {\n      var record = this.allWrites_[i];\n\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n   *\r\n   * @param {!number} writeId\r\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n   * events as a result).\r\n   */\n\n\n  WriteTree.prototype.removeWrite = function (writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    var _this = this;\n\n    var idx = this.allWrites_.findIndex(function (s) {\n      return s.writeId === writeId;\n    });\n    util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    var writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n    var removedWriteWasVisible = writeToRemove.visible;\n    var removedWriteOverlapsWithOtherWrites = false;\n    var i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      var currentWrite = this.allWrites_[i];\n\n      if (currentWrite.visible) {\n        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n      } else {\n        var children = writeToRemove.children;\n        each(children, function (childName) {\n          _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n        });\n      }\n\n      return true;\n    }\n  };\n  /**\r\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n   * No server data is considered.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.getCompleteWriteData = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n   * writes), attempt to calculate a complete snapshot for the given path\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n          return null;\n        } else {\n          var filter = function filter(write) {\n            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));\n          };\n\n          var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  };\n  /**\r\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n   * Used when creating new views, to pre-fill their complete event children snapshot.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n    var completeChildren = ChildrenNode.EMPTY_NODE;\n    var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n        });\n      }\n\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(childName, node);\n      }); // Add any complete children we have from the set\n\n      merge_1.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    }\n  };\n  /**\r\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n   * applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!Path} childPath\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n    util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    var path = treePath.child(childPath);\n\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      var childMerge = this.visibleWrites_.childCompoundWrite(path);\n\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n    var path = treePath.child(childKey);\n    var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        var childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   */\n\n\n  WriteTree.prototype.shadowingWrite = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window.\r\n   */\n\n\n  WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n    var toIterate;\n    var merge = this.visibleWrites_.childCompoundWrite(treePath);\n    var shadowingNode = merge.getCompleteNode(Path.Empty);\n\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n\n    toIterate = toIterate.withIndex(index);\n\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      var nodes = [];\n      var cmp = index.getCompare();\n      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n      var next = iter.getNext();\n\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n\n        next = iter.getNext();\n      }\n\n      return nodes;\n    } else {\n      return [];\n    }\n  };\n\n  WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (var childName in writeRecord.children) {\n        if (writeRecord.children.hasOwnProperty(childName) && writeRecord.path.child(childName).contains(path)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n  /**\r\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n   */\n\n\n  WriteTree.prototype.resetTree_ = function () {\n    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  };\n  /**\r\n   * The default filter used when constructing the tree. Keep everything that's visible.\r\n   */\n\n\n  WriteTree.DefaultFilter_ = function (write) {\n    return write.visible;\n  };\n  /**\r\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n   * event data at that path.\r\n   */\n\n\n  WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n    var compoundWrite = CompoundWrite.Empty;\n\n    for (var i = 0; i < writes.length; ++i) {\n      var write = writes[i]; // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n      if (filter(write)) {\n        var writePath = write.path;\n        var relativePath = void 0;\n\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n            } else {\n              var child = util.safeGet(write.children, relativePath.getFront());\n\n              if (child) {\n                // There exists a child in this node that matches the root path\n                var deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          }\n        } else {\n          throw util.assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n\n    return compoundWrite;\n  };\n\n  return WriteTree;\n}();\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTreeRef =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path\r\n   * @param {!WriteTree} writeTree\r\n   */\n  function WriteTreeRef(path, writeTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n  /**\r\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n   * can lead to a more expensive calculation.\r\n   *\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n  };\n  /**\r\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n   * mix of the given server data and write data.\r\n   *\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n  };\n  /**\r\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n   * if anything, needs to be applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events should be raised\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n   *\r\n   * @param {!Path} path\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.shadowingWrite = function (path) {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window\r\n   *\r\n   * @param {?Node} completeServerData\r\n   * @param {!NamedNode} startPost\r\n   * @param {!number} count\r\n   * @param {boolean} reverse\r\n   * @param {!Index} index\r\n   * @return {!Array.<!NamedNode>}\r\n   */\n\n\n  WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerCache\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n  };\n  /**\r\n   * Return a WriteTreeRef for a child.\r\n   *\r\n   * @param {string} childName\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTreeRef.prototype.child = function (childName) {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  };\n\n  return WriteTreeRef;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\n\n\nvar SyncTree =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n\n    this.syncPointTree_ = ImmutableTree.Empty;\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n\n    this.pendingWriteTree_ = new WriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n  /**\r\n   * Apply the data changes for a user-generated set() or transaction() call.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\n    }\n  };\n  /**\r\n   * Apply the data from a user-generated update() call\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\n  };\n  /**\r\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n   *\r\n   * @param revert True if the given write failed and needs to be reverted\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree.Empty;\n\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path.Empty, true);\n      } else {\n        each(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\n        });\n      }\n\n      return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\r\n   * Apply new server data for the specified path..\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\n  };\n  /**\r\n   * Apply new server data to be merged in at the specified path.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\n  };\n  /**\r\n   * Apply a listen complete for a query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\n  };\n  /**\r\n   * Apply new server data for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\r\n   * Apply server data to be merged in for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree.fromObject(changedChildren);\n      var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Apply a listen complete for a tagged query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var serverCacheComplete;\n\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      util.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view\n      /** @type !View */\n      = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n\n    return events;\n  };\n  /**\r\n   * Remove event callback(s).\r\n   *\r\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n   *\r\n   * @param eventRegistration If null, all callbacks are removed.\r\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return Cancel events, if cancelError was provided.\r\n   */\n\n\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this; // Find the syncPoint first. Then deal with whether or not it has matching listeners\n\n\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\r\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n                newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));\n\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      } // Now, clear all of the tags we're tracking for the removed listens\n\n\n      this.removeTags_(removed);\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n   * it, but as this is only used by transaction code, that should always be the case anyways.\r\n   *\r\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n   *\r\n   * @param path The path to the data we want\r\n   * @param writeIdsToExclude A specific set to be excluded\r\n   */\n\n\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\r\n   * This collapses multiple unfiltered views into a single view, since we only need a single\r\n   * listener for them.\r\n   */\n\n\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n\n        each(childMap, function (_key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  };\n  /**\r\n   * Normalizes a query to a query we send the server for listening\r\n   *\r\n   * @return The normalized query\r\n   */\n\n\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef();\n    } else {\n      return query;\n    }\n  };\n  /**\r\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n   *\r\n   * @return This method can return events to support synchronous data sources\r\n   */\n\n\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n\n    if (tag) {\n      util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n\n          each(childMap, function (_key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n\n    return events;\n  };\n\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function hashFn() {\n        var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function onComplete(status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error = errorForServerCode(status, query);\n          return _this.removeEventRegistration(query,\n          /*eventRegistration*/\n          null, error);\n        }\n      }\n    };\n  };\n  /**\r\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n   */\n\n\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\r\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n   */\n\n\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\r\n   * Return the query associated with the given tag, if we have one\r\n   */\n\n\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap.get(tag);\n  };\n  /**\r\n   * Return the tag associated with the given query.\r\n   */\n\n\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  };\n  /**\r\n   * Static accessor for query tags.\r\n   */\n\n\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\r\n   * A helper method to apply tagged operations\r\n   */\n\n\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache,\n    /*serverCache=*/\n    null);\n  };\n  /**\r\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n   *\r\n   * NOTES:\r\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n   *\r\n   * - We call applyOperation() on each SyncPoint passing three things:\r\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n   *   3. A snapshot Node with cached server data, if we have it.\r\n   *\r\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n   */\n\n\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_,\n    /*serverCache=*/\n    null, this.pendingWriteTree_.childWrites(Path.Empty));\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n\n    var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n\n    return events;\n  };\n  /**\r\n   * Static tracker for next query tag.\r\n   */\n\n\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\n\n\nvar SnapshotHolder =\n/** @class */\nfunction () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n\n  return SnapshotHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nvar AuthTokenProvider =\n/** @class */\nfunction () {\n  function AuthTokenProvider(app_, authProvider_) {\n    var _this = this;\n\n    this.app_ = app_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.get().then(function (auth) {\n        return _this.auth_ = auth;\n      });\n    }\n  }\n  /**\r\n   * @param {boolean} forceRefresh\r\n   * @return {!Promise<FirebaseAuthTokenData>}\r\n   */\n\n\n  AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n\n  AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(function () {\n        return listener(null);\n      }, 0);\n      this.authProvider_.get().then(function (auth) {\n        return auth.addAuthTokenListener(listener);\n      });\n    }\n  };\n\n  AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.authProvider_.get().then(function (auth) {\n      return auth.removeAuthTokenListener(listener);\n    });\n  };\n\n  AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.app_.options) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  };\n\n  return AuthTokenProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\n\n\nvar StatsCollection =\n/** @class */\nfunction () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    if (!util.contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  };\n\n  StatsCollection.prototype.get = function () {\n    return util.deepCopy(this.counters_);\n  };\n\n  return StatsCollection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StatsManager =\n/** @class */\nfunction () {\n  function StatsManager() {}\n\n  StatsManager.getCollection = function (repoInfo) {\n    var hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  };\n\n  StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n    var hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  };\n\n  StatsManager.collections_ = {};\n  StatsManager.reporters_ = {};\n  return StatsManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\n\n\nvar StatsListener =\n/** @class */\nfunction () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n\n    var delta = tslib.__assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  };\n\n  return StatsListener;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\r\n * @constructor\r\n */\n\nvar StatsReporter =\n/** @class */\nfunction () {\n  /**\r\n   * @param collection\r\n   * @param server_\r\n   */\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  StatsReporter.prototype.includeStat = function (stat) {\n    this.statsToReport_[stat] = true;\n  };\n\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    each(stats, function (stat, value) {\n      if (value > 0 && util.contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n\n  return StatsReporter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventQueue =\n/** @class */\nfunction () {\n  function EventQueue() {\n    /**\r\n     * @private\r\n     * @type {!Array.<EventList>}\r\n     */\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     * @private\r\n     * @type {!number}\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n  /**\r\n   * @param {!Array.<Event>} eventDataList The new events to queue.\r\n   */\n\n\n  EventQueue.prototype.queueEvents = function (eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    var currList = null;\n\n    for (var i = 0; i < eventDataList.length; i++) {\n      var eventData = eventDataList[i];\n      var eventPath = eventData.getPath();\n\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n   * for the specified path.\r\n   *\r\n   * It is assumed that the new events are all for the specified path.\r\n   *\r\n   * @param {!Path} path The path to raise events for.\r\n   * @param {!Array.<Event>} eventDataList The new events to raise.\r\n   */\n\n\n  EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.equals(path);\n    });\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n   * locations related to the specified change path (i.e. all ancestors and descendants).\r\n   *\r\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n   *\r\n   * @param {!Path} changedPath The path to raise events for.\r\n   * @param {!Array.<!Event>} eventDataList The events to raise\r\n   */\n\n\n  EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  };\n  /**\r\n   * @param {!function(!Path):boolean} predicate\r\n   * @private\r\n   */\n\n\n  EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n    this.recursionDepth_++;\n    var sentAll = true;\n\n    for (var i = 0; i < this.eventLists_.length; i++) {\n      var eventList = this.eventLists_[i];\n\n      if (eventList) {\n        var eventPath = eventList.getPath();\n\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  };\n\n  return EventQueue;\n}();\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\n\n\nvar EventList =\n/** @class */\nfunction () {\n  function EventList(path_) {\n    this.path_ = path_;\n    /**\r\n     * @type {!Array.<Event>}\r\n     * @private\r\n     */\n\n    this.events_ = [];\n  }\n  /**\r\n   * @param {!Event} eventData\r\n   */\n\n\n  EventList.prototype.add = function (eventData) {\n    this.events_.push(eventData);\n  };\n  /**\r\n   * Iterates through the list and raises each event\r\n   */\n\n\n  EventList.prototype.raise = function () {\n    for (var i = 0; i < this.events_.length; i++) {\n      var eventData = this.events_[i];\n\n      if (eventData !== null) {\n        this.events_[i] = null;\n        var eventFn = eventData.getEventRunner();\n\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n\n        exceptionGuard(eventFn);\n      }\n    }\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  EventList.prototype.getPath = function () {\n    return this.path_;\n  };\n\n  return EventList;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Array.<string>} allowedEvents_\r\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   * @param {!string} eventType\r\n   * @param {...*} varArgs\r\n   */\n\n\n  EventEmitter.prototype.trigger = function (eventType) {\n    var varArgs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      varArgs[_i - 1] = arguments[_i];\n    }\n\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = tslib.__spread(this.listeners_[eventType]);\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  };\n\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    util.assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n\n  return EventEmitter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @extends {EventEmitter}\r\n */\n\n\nvar VisibilityMonitor =\n/** @class */\nfunction (_super) {\n  tslib.__extends(VisibilityMonitor, _super);\n\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n\n  return VisibilityMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\n\n\nvar OnlineMonitor =\n/** @class */\nfunction (_super) {\n  tslib.__extends(OnlineMonitor, _super);\n\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n\n    _this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util.isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n\n  return OnlineMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\n\n\nvar PacketReceiver =\n/** @class */\nfunction () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   * @param {number} requestNum\r\n   * @param {Array} data\r\n   */\n\n\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n\n    this.pendingResponses[requestNum] = data;\n\n    var _loop_1 = function _loop_1() {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n\n      var _loop_2 = function _loop_2(i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n\n        return \"break\";\n      }\n\n      this_1.currentResponseNum++;\n    };\n\n    var this_1 = this;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  return PacketReceiver;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\nvar BrowserPollConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId An identifier for this connection, used for logging\r\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n   *                                         transport session\r\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n   *                                     connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      return repoInfo.connectionURL(LONG_POLLING, params);\n    };\n  }\n  /**\r\n   *\r\n   * @param {function(Object)} onMessage Callback when messages arrive\r\n   * @param {function()} onDisconnect Callback with connection lost.\r\n   */\n\n\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n      _this.onClosed_();\n\n      _this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) {\n        return;\n      } //Set up a callback that gets triggered once a connection is set up.\n\n\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib.__read(args, 5),\n            command = _a[0],\n            arg1 = _a[1],\n            arg2 = _a[2],\n            arg3 = _a[3],\n            arg4 = _a[4];\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib.__read(args, 2),\n            pN = _a[0],\n            data = _a[1];\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n\n      if (typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      var connectURL = _this.urlFn(urlParams);\n\n      _this.log_('Connecting via long-poll to ' + connectURL);\n\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  }; // Static method, use string literal so it can be accessed in a generic way\n\n\n  BrowserPollConnection.isAvailable = function () {\n    if (util.isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  };\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param {!Object} data The JSON data to transmit.\r\n   */\n\n\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    var base64data = util.base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   * @param {!string} id\r\n   * @param {!string} pw\r\n   */\n\n\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (util.isNodeSdk()) {\n      return;\n    }\n\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   * @param {*} args\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = util.stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\n\n\nvar FirebaseIFrameScriptHolder =\n/** @class */\nfunction () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!util.isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   * @private\r\n   * @return {Element}\r\n   */\n\n\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this; //Mark this iframe as dead, so no new requests are sent.\n\n\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    } // Protect from being called recursively.\n\n\n    var onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param {!string} id - The ID of this connection\r\n   * @param {!string} pw - The password for this connection\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      var curDataString = '';\n      var i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param {!string} url - The URL of the script tag.\r\n   * @param {!number} serial - The serial number of the request.\r\n   * @private\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this; //remember that we sent this request.\n\n\n    this.outstandingRequests.add(serial);\n\n    var doNewRequest = function doNewRequest() {\n      _this.outstandingRequests.delete(serial);\n\n      _this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    var readyStateCB = function readyStateCB() {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param {!string} url - The URL for the script tag source.\r\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n\n    if (util.isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) {\n            return;\n          }\n\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var rstate = newScript_1.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n\n            _this.close();\n          };\n\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n\n  return FirebaseIFrameScriptHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\n\nvar SDK_VERSION = ''; // SDK_VERSION should be set before any database instance is created\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\n\nvar WebSocketConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId identifier for this transport\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n  }\n  /**\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   * @return {string} connection url\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  };\n  /**\r\n   *\r\n   * @param onMessage Callback when messages arrive\r\n   * @param onDisconnect Callback with connection lost.\r\n   */\n\n\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (util.isNodeSdk()) {\n        var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device\n          }\n        }; // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n\n      _this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n\n      _this.mySock = null;\n\n      _this.onClosed_();\n    };\n\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      var error = e.message || e.data;\n\n      if (error) {\n        _this.log_(error);\n      }\n\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  WebSocketConnection.prototype.start = function () {};\n\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   * @return {boolean}\r\n   */\n\n\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n\n    if (this.frames.length === this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = util.jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param {number} frameCount The number of frames we are expecting from the server\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @param {!String} data\r\n   * @return {?String} Any remaining data to be process, or null if there is none\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    util.assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess The frame data\r\n   */\n\n\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param {Object} data The JSON object to transmit\r\n   */\n\n\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n\n      _this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param {string} str String to send.\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   * @type {number}\r\n   */\n\n\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   * @type {number}\r\n   */\n\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\n\n\nvar TransportManager =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    /**\r\n     * @const\r\n     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n     */\n    get: function get() {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @param {!RepoInfo} repoInfo\r\n   * @private\r\n   */\n\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var e_1, _a;\n\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports = this.transports_ = [];\n\n      try {\n        for (var _b = tslib.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var transport = _c.value;\n\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n   * initial transport to use\r\n   */\n\n\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n   * transport, or null\r\n   */\n\n\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n\n  return TransportManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nvar UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} id - an id for this connection\r\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   * @private\r\n   */\n\n\n  Connection.prototype.start_ = function () {\n    var _this = this;\n\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n\n            _this.isHealthy_ = true;\n\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n\n            _this.close();\n          }\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(healthyTimeoutMS));\n    }\n  };\n  /**\r\n   * @return {!string}\r\n   * @private\r\n   */\n\n\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (message) {\n      if (_this.state_ !== 2\n      /* DISCONNECTED */\n      ) {\n          if (conn === _this.rx_) {\n            _this.onPrimaryMessageReceived_(message);\n          } else if (conn === _this.secondaryConn_) {\n            _this.onSecondaryMessageReceived_(message);\n          } else {\n            _this.log_('message on old connection');\n          }\n        }\n    };\n  };\n  /**\r\n   *\r\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n   */\n\n\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  };\n\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {Object} handshake The handshake data returned from the server\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host); // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ === 0\n    /* CONNECTING */\n    ) {\n        this.conn_.start();\n        this.onConnectionEstablished_(this.conn_, timestamp);\n\n        if (PROTOCOL_VERSION !== version) {\n          warn('Protocol version mismatch detected');\n        } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n        this.tryStartUpgrade_();\n      }\n  };\n\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host); // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.close();\n      } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('sending ping on primary.');\n        this.sendData_({\n          t: 'c',\n          d: {\n            t: PING,\n            d: {}\n          }\n        });\n      }\n  };\n\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   *\r\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n        this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n        if (this.repoInfo_.isCacheableHost()) {\n          PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n          this.repoInfo_.internalHost = this.repoInfo_.host;\n        }\n      } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('Realtime connection lost.');\n      }\n\n    this.close();\n  };\n  /**\r\n   *\r\n   * @param {string} reason\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  };\n\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n        throw 'Connection is not connected';\n      } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n        this.log_('Closing realtime connection.');\n        this.state_ = 2\n        /* DISCONNECTED */\n        ;\n        this.closeConnections_();\n\n        if (this.onDisconnect_) {\n          this.onDisconnect_();\n          this.onDisconnect_ = null;\n        }\n      }\n  };\n  /**\r\n   *\r\n   * @private\r\n   */\n\n\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n\n  return Connection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nvar ServerActions =\n/** @class */\nfunction () {\n  function ServerActions() {}\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, ?string)} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param {string} token The authentication token\r\n   */\n\n\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  /**\r\n   * @param {Object.<string, *>} stats\r\n   */\n\n\n  ServerActions.prototype.reportStats = function (stats) {};\n\n  return ServerActions;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nvar PersistentConnection =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PersistentConnection, _super);\n  /**\r\n   * @implements {ServerActions}\r\n   * @param repoInfo_ Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ A callback for new data from the server\r\n   */\n\n\n  function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    _this.interruptReasons_ = {};\n    /** Map<path, Map<queryId, ListenSpec>> */\n\n    _this.listens = new Map();\n    _this.outstandingPuts_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    _this.establishConnectionTimer_ = null;\n    _this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    _this.realtime_ = null;\n    _this.authToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !util.isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    _this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n\n    return _this;\n  }\n\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(util.stringify(msg));\n    util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var queryId = query.queryIdentifier();\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n    util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n\n    var query = listenSpec.query;\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[\n      /*data*/\n      'd'];\n      var status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var warnings = util.safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        var indexPath = query.path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || util.isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[\n        /*status*/\n        's'];\n        var data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  };\n\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n\n    if (hash !== undefined) {\n      request[\n      /*hash*/\n      'h'] = hash;\n    } // TODO: Only keep track of the most recent put for a given path?\n\n\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(message[\n        /*status*/\n        's'], message[\n        /* data */\n        'd']);\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this; // If we're not connected, we just drop the stats.\n\n\n    if (this.connected_) {\n      var request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, function (result) {\n        var status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          var errorReason = result[\n          /* data */\n          'd'];\n\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + util.stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n\n    if (action === 'd') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge*/\n      false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge=*/\n      true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[\n      /*path*/\n      'p'], body[\n      /*query*/\n      'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + util.stringify(action) + '\\nAre you using the latest client?');\n    }\n  };\n\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n\n    util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n\n      _this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(timeout));\n  };\n\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  };\n\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  };\n\n  PersistentConnection.prototype.establishConnection_ = function () {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      var onDataMessage_1 = this.onDataMessage_.bind(this);\n      var onReady_1 = this.onReady_.bind(this);\n      var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n      var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      var self_1 = this;\n      var lastSessionId_1 = this.lastSessionId;\n      var canceled_1 = false;\n      var connection_1 = null;\n\n      var closeFn_1 = function closeFn_1() {\n        if (connection_1) {\n          connection_1.close();\n        } else {\n          canceled_1 = true;\n          onDisconnect_1();\n        }\n      };\n\n      var sendRequestFn = function sendRequestFn(msg) {\n        util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n        connection_1.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn_1,\n        sendRequest: sendRequestFn\n      };\n      var forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false; // First fetch auth token, and establish connection after fetching the token was successful\n\n      this.authTokenProvider_.getToken(forceRefresh).then(function (result) {\n        if (!canceled_1) {\n          log('getToken() completed. Creating connection.');\n          self_1.authToken_ = result && result.accessToken;\n          connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1,\n          /* onKill= */\n          function (reason) {\n            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\n            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId_1);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      }).then(null, function (error) {\n        self_1.log_('Failed to get token: ' + error);\n\n        if (!canceled_1) {\n          if (util.CONSTANTS.NODE_ADMIN) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n\n          closeFn_1();\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (util.isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  };\n\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  };\n\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    var listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      var map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  };\n\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n\n  PersistentConnection.prototype.restoreState_ = function () {\n    var e_1, _a, e_2, _b; //Re-authenticate ourselves if we have a credential stored.\n\n\n    this.tryAuth();\n\n    try {\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (var _c = tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var queries = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var listenSpec = _f.value;\n            this.sendListen_(listenSpec);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   */\n\n\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n\n    if (util.CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (util.CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (util.isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (util.isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  };\n\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return util.isEmpty(this.interruptReasons_) && online;\n  };\n\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nvar ReadonlyRestClient =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n   * @param {AuthTokenProvider} authTokenProvider_\r\n   * @implements {ServerActions}\r\n   */\n\n\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    /** @private {function(...[*])} */\n\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     *\r\n     * @private {!Object.<string, !Object>}\r\n     */\n\n    _this.listens_ = {};\n    return _this;\n  }\n\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {?number=} tag\r\n   * @return {string}\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n      return query.path.toString();\n    }\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier()); // Mark this listener so we can tell if it's removed.\n\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (util.safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n\n        if (!error) {\n          status_1 = 'ok';\n        } else if (error === 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error;\n        }\n\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {// no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   *\r\n   * @param {!string} pathString\r\n   * @param {!Object.<string, *>} queryStringParameters\r\n   * @param {?function(?number, *=)} callback\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n\n    queryStringParameters['format'] = 'export';\n    this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false).then(function (authTokenData) {\n      var authToken = authTokenData && authTokenData.accessToken;\n\n      if (authToken) {\n        queryStringParameters['auth'] = authToken;\n      }\n\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + util.querystring(queryStringParameters);\n\n      _this.log_('Sending REST request for ' + url);\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n\n          var res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = util.jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  };\n\n  return ReadonlyRestClient;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * A connection to a single data repository.\r\n */\n\nvar Repo =\n/** @class */\nfunction () {\n  function Repo(repoInfo_, forceRestClient, app, authProvider) {\n    var _this = this;\n\n    this.repoInfo_ = repoInfo_;\n    this.app = app;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = new SparseSnapshotTree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null;\n    var authTokenProvider = new AuthTokenProvider(app, authProvider);\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      var authOverride = app.options['databaseAuthVariableOverride']; // Validate authOverride\n\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n        }\n\n        try {\n          util.stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(function (token) {\n      _this.server_.refreshAuthToken(token);\n    }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n    this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () {\n      return new StatsReporter(_this.stats_, _this.server_);\n    });\n    this.transactionsInit_(); // Used for .info.\n\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        var infoEvents = [];\n\n        var node = _this.infoData_.getNode(query.path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n\n\n        if (!node.isEmpty()) {\n          infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n          setTimeout(function () {\n            onComplete('ok');\n          }, 0);\n        }\n\n        return infoEvents;\n      },\n      stopListening: function stopListening() {}\n    });\n    this.updateInfo_('connected', false);\n    this.serverSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n          var events = onComplete(status, data);\n\n          _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        }); // No synchronous events for network-backed sync trees\n\n\n        return [];\n      },\n      stopListening: function stopListening(query, tag) {\n        _this.server_.unlisten(query, tag);\n      }\n    });\n  }\n  /**\r\n   * @return The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n  /**\r\n   * @return The namespace represented by the repo.\r\n   */\n\n\n  Repo.prototype.name = function () {\n    return this.repoInfo_.namespace;\n  };\n  /**\r\n   * @return The time in milliseconds, taking the server offset into account if we have one.\r\n   */\n\n\n  Repo.prototype.serverTime = function () {\n    var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    var offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n  };\n  /**\r\n   * Generate ServerValues using some variables from the repo object.\r\n   */\n\n\n  Repo.prototype.generateServerValues = function () {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  };\n  /**\r\n   * Called by realtime when we get new messages from the server.\r\n   */\n\n\n  Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n    // For testing.\n    this.dataUpdateCount++;\n    var path = new Path(pathString);\n    data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;\n    var events = [];\n\n    if (tag) {\n      if (isMerge) {\n        var taggedChildren = util.map(data, function (raw) {\n          return nodeFromJSON$1(raw);\n        });\n        events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n      } else {\n        var taggedSnap = nodeFromJSON$1(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n      }\n    } else if (isMerge) {\n      var changedChildren = util.map(data, function (raw) {\n        return nodeFromJSON$1(raw);\n      });\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      var snap = nodeFromJSON$1(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n\n    var affectedPath = path;\n\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }; // TODO: This should be @private but it's used by test_access.js and internal.js\n\n\n  Repo.prototype.interceptServerData_ = function (callback) {\n    this.interceptServerDataCallback_ = callback;\n  };\n\n  Repo.prototype.onConnectStatus_ = function (connectStatus) {\n    this.updateInfo_('connected', connectStatus);\n\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  };\n\n  Repo.prototype.onServerInfoUpdate_ = function (updates) {\n    var _this = this;\n\n    each(updates, function (key, value) {\n      _this.updateInfo_(key, value);\n    });\n  };\n\n  Repo.prototype.updateInfo_ = function (pathString, value) {\n    var path = new Path('/.info/' + pathString);\n    var newNode = nodeFromJSON$1(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  };\n\n  Repo.prototype.getNextWriteId_ = function () {\n    return this.nextWriteId_++;\n  };\n\n  Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n    var _this = this;\n\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    var writeId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(path.toString(), newNodeUnresolved.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      var success = status === 'ok';\n\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n    var affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath); // We queued the events above, so just flush the queue here\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  };\n\n  Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    this.log_('update', {\n      path: path.toString(),\n      value: childrenToMerge\n    }); // Start with our existing data and merge each child into it.\n\n    var empty = true;\n    var serverValues = this.generateServerValues();\n    var changedChildren = {};\n    each(childrenToMerge, function (changedKey, changedValue) {\n      empty = false;\n      var newNodeUnresolved = nodeFromJSON$1(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    });\n\n    if (!empty) {\n      var writeId_1 = this.getNextWriteId_();\n      var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n        var success = status === 'ok';\n\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n\n        var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n\n        _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n\n        _this.callOnCompleteCallback(onComplete, status, errorReason);\n      });\n      each(childrenToMerge, function (changedPath) {\n        var affectedPath = _this.abortTransactions_(path.child(changedPath));\n\n        _this.rerunTransactions_(affectedPath);\n      }); // We queued the events above, so just flush the queue here\n\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  };\n  /**\r\n   * Applies all of the changes stored up in the onDisconnect_ tree.\r\n   */\n\n\n  Repo.prototype.runOnDisconnectEvents_ = function () {\n    var _this = this;\n\n    this.log_('onDisconnectEvents');\n    var serverValues = this.generateServerValues();\n    var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\n    var events = [];\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\n      events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n\n      var affectedPath = _this.abortTransactions_(path);\n\n      _this.rerunTransactions_(affectedPath);\n    });\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  };\n\n  Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n    var _this = this;\n\n    this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.forget(path);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value, priority);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    if (util.isEmpty(childrenToMerge)) {\n      log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n      if (status === 'ok') {\n        each(childrenToMerge, function (childName, childNode) {\n          var newChildNode = nodeFromJSON$1(childNode);\n\n          _this.onDisconnect_.remember(path.child(childName), newChildNode);\n        });\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.interrupt = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.resume = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.stats = function (showDelta) {\n    if (showDelta === void 0) {\n      showDelta = false;\n    }\n\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    var stats;\n\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n      return Math.max(currentValue.length, previousValue);\n    }, 0);\n    each(stats, function (stat, value) {\n      var paddedStat = stat; // pad stat names to be the same length (plus 2 extra spaces).\n\n      for (var i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n\n      console.log(paddedStat + value);\n    });\n  };\n\n  Repo.prototype.statsIncrementCounter = function (metric) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  };\n\n  Repo.prototype.log_ = function () {\n    var varArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n\n    var prefix = '';\n\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n\n    log.apply(void 0, tslib.__spread([prefix], varArgs));\n  };\n\n  Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n    if (callback) {\n      exceptionGuard(function () {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          var code = (status || 'error').toUpperCase();\n          var message = code;\n\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          var error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          error.code = code;\n          callback(error);\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Repo.prototype, \"database\", {\n    get: function get() {\n      return this.__database || (this.__database = new Database(this));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Repo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar RangedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n  /**\r\n   * @param {!NamedNode} node\r\n   * @return {boolean}\r\n   */\n\n\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n\n  return RangedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar LimitedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        var count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n\n          cmp = function cmp(a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        var count = 0;\n        var foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!Node} snap\r\n   * @param {string} childKey\r\n   * @param {!Node} childSnap\r\n   * @param {!CompleteChildSource} source\r\n   * @param {?ChildChangeAccumulator} changeAccumulator\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n\n      cmp = function cmp(a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    var oldEventCache = snap;\n    util.assert(oldEventCache.numChildren() === this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\n        }\n\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n\n  return LimitedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\n\n\nvar QueryParams =\n/** @class */\nfunction () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  /**\r\n   * @return {boolean} True if it would return from left.\r\n   */\n\n\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartValue = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartName = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndValue = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndName = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   * @return {!number}\r\n   */\n\n\n  QueryParams.prototype.getLimit = function () {\n    util.assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\r\n   * @return {!Index}\r\n   */\n\n\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   * @private\r\n   */\n\n\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexStartValue_ = indexValue;\n\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexEndValue_ = indexValue;\n\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {!Index} index\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\r\n   * @return {!Object}\r\n   */\n\n\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    } // For now, priority index is the default, so we only specify if it's some other index\n\n\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n\n    return obj;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  };\n  /**\r\n   * @return {!NodeFilter}\r\n   */\n\n\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  };\n  /**\r\n   * Returns a set of REST query string parameters representing this query.\r\n   *\r\n   * @return {!Object.<string,*>} query string parameters\r\n   */\n\n\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    var orderBy;\n\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n\n    qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\n\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\n\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  };\n  /**\r\n   * Wire Protocol Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\r\n   * REST Query Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\r\n   * Default, empty query parameters\r\n   * @type {!QueryParams}\r\n   * @const\r\n   */\n\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction (_super) {\n  tslib.__extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   *\r\n   * @param {!Repo} repo\r\n   * @param {(!Path)} path\r\n   * @extends {Query}\r\n   */\n\n\n  function Reference(repo, path) {\n    var _this = this;\n\n    if (!(repo instanceof Repo)) {\n      throw new Error('new Reference() no longer supported - use app.database().');\n    } // call Query's constructor, passing in the repo and path.\n\n\n    _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\n    return _this;\n  }\n  /** @return {?string} */\n\n\n  Reference.prototype.getKey = function () {\n    util.validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  };\n  /**\r\n   * @param {!(string|Path)} pathString\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.child = function (pathString) {\n    util.validateArgCount('Reference.child', 1, 1, arguments.length);\n\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  };\n  /** @return {?Reference} */\n\n\n  Reference.prototype.getParent = function () {\n    util.validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  };\n  /** @return {!Reference} */\n\n\n  Reference.prototype.getRoot = function () {\n    util.validateArgCount('Reference.root', 0, 0, arguments.length);\n    var ref = this;\n\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n\n    return ref;\n  };\n  /** @return {!Database} */\n\n\n  Reference.prototype.databaseProp = function () {\n    return this.repo.database;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.set = function (newVal, onComplete) {\n    util.validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    util.validateCallback('Reference.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal,\n    /*priority=*/\n    null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n    util.validateCallback('Reference.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {string|number|null} newPriority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n    }\n\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.remove = function (onComplete) {\n    util.validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    util.validateCallback('Reference.remove', 1, onComplete, true);\n    return this.set(null, onComplete);\n  };\n  /**\r\n   * @param {function(*):*} transactionUpdate\r\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n   * @param {boolean=} applyLocally\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    util.validateCallback('Reference.transaction', 2, onComplete, true); // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    var deferred = new util.Deferred();\n\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(function () {});\n    }\n\n    var promiseComplete = function promiseComplete(error, committed, snapshot) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n\n    this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n    return deferred.promise;\n  };\n  /**\r\n   * @param {string|number|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    util.validateCallback('Reference.setPriority', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*=} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.push = function (value, onComplete) {\n    util.validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    util.validateCallback('Reference.push', 2, onComplete, true);\n    var now = this.repo.serverTime();\n    var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n\n    var thennablePushRef = this.child(name);\n    var pushRef = this.child(name);\n    var promise;\n\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(function () {});\n    }\n\n    return thennablePushRef;\n  };\n  /**\r\n   * @return {!OnDisconnect}\r\n   */\n\n\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  };\n\n  Object.defineProperty(Reference.prototype, \"database\", {\n    get: function get() {\n      return this.databaseProp();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function get() {\n      return this.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function get() {\n      return this.getParent();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function get() {\n      return this.getRoot();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Node in a Tree.\r\n */\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode() {\n    // TODO: Consider making accessors that create children and value lazily or\n    // separate Internal / Leaf 'types'.\n    this.children = {};\n    this.childCount = 0;\n    this.value = null;\n  }\n\n  return TreeNode;\n}();\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nvar Tree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {string=} name_ Optional name of the node.\r\n   * @param {Tree=} parent_ Optional parent node.\r\n   * @param {TreeNode=} node_ Optional node to wrap.\r\n   */\n  function Tree(name_, parent_, node_) {\n    if (name_ === void 0) {\n      name_ = '';\n    }\n\n    if (parent_ === void 0) {\n      parent_ = null;\n    }\n\n    if (node_ === void 0) {\n      node_ = new TreeNode();\n    }\n\n    this.name_ = name_;\n    this.parent_ = parent_;\n    this.node_ = node_;\n  }\n  /**\r\n   * Returns a sub-Tree for the given path.\r\n   *\r\n   * @param {!(string|Path)} pathObj Path to look up.\r\n   * @return {!Tree.<T>} Tree for path.\r\n   */\n\n\n  Tree.prototype.subTree = function (pathObj) {\n    // TODO: Require pathObj to be Path?\n    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    var child = this,\n        next = path.getFront();\n\n    while (next !== null) {\n      var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  };\n  /**\r\n   * Returns the data associated with this tree node.\r\n   *\r\n   * @return {?T} The data or null if no data exists.\r\n   */\n\n\n  Tree.prototype.getValue = function () {\n    return this.node_.value;\n  };\n  /**\r\n   * Sets data to this tree node.\r\n   *\r\n   * @param {!T} value Value to set.\r\n   */\n\n\n  Tree.prototype.setValue = function (value) {\n    util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  };\n  /**\r\n   * Clears the contents of the tree node (its value and all children).\r\n   */\n\n\n  Tree.prototype.clear = function () {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  };\n  /**\r\n   * @return {boolean} Whether the tree has any children.\r\n   */\n\n\n  Tree.prototype.hasChildren = function () {\n    return this.node_.childCount > 0;\n  };\n  /**\r\n   * @return {boolean} Whether the tree is empty (no value or children).\r\n   */\n\n\n  Tree.prototype.isEmpty = function () {\n    return this.getValue() === null && !this.hasChildren();\n  };\n  /**\r\n   * Calls action for each child of this tree node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachChild = function (action) {\n    var _this = this;\n\n    each(this.node_.children, function (child, childTree) {\n      action(new Tree(child, _this, childTree));\n    });\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n   *   false.\r\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n   *   parent.\r\n   */\n\n\n  Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(function (child) {\n      child.forEachDescendant(action,\n      /*includeSelf=*/\n      true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  };\n  /**\r\n   * Calls action on each ancestor node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n   *   true to abort.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n   * @return {boolean} true if the action callback returned true.\r\n   */\n\n\n  Tree.prototype.forEachAncestor = function (action, includeSelf) {\n    var node = includeSelf ? this : this.parent();\n\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n\n      node = node.parent();\n    }\n\n    return false;\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n   * is found, action is called on it and traversal does not continue inside the node.\r\n   * Action is *not* called on this node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n    this.forEachChild(function (child) {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  };\n  /**\r\n   * @return {!Path} The path of this tree node, as a Path.\r\n   */\n\n\n  Tree.prototype.path = function () {\n    return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);\n  };\n  /**\r\n   * @return {string} The name of the tree node.\r\n   */\n\n\n  Tree.prototype.name = function () {\n    return this.name_;\n  };\n  /**\r\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n   */\n\n\n  Tree.prototype.parent = function () {\n    return this.parent_;\n  };\n  /**\r\n   * Adds or removes this child from its parent based on whether it's empty or not.\r\n   *\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateParents_ = function () {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  };\n  /**\r\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n   *\r\n   * @param {string} childName The name of the child to update.\r\n   * @param {!Tree.<T>} child The child to update.\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateChild_ = function (childName, child) {\n    var childEmpty = child.isEmpty();\n    var childExists = util.contains(this.node_.children, childName);\n\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  };\n\n  return Tree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\r\n * @enum {number}\r\n */\n\n\nvar TransactionStatus;\n\n(function (TransactionStatus) {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\"; // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n\n  TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\"; // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n\n  TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\"; // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n\n  TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\"; // Temporary state used to mark transactions that need to be aborted.\n\n  TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus || (TransactionStatus = {}));\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nRepo.prototype.transactionsInit_ = function () {\n  /**\r\n   * Stores queues of outstanding transactions for Firebase locations.\r\n   *\r\n   * @type {!Tree.<Array.<!Transaction>>}\r\n   * @private\r\n   */\n  this.transactionQueueTree_ = new Tree();\n};\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\n\n\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n  this.log_('transaction on ' + path); // Add a watch to make sure we get server updates.\n\n  var valueCallback = function valueCallback() {};\n\n  var watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n\n  var unwatcher = function unwatcher() {\n    watchRef.off('value', valueCallback);\n  }; // Initialize transaction.\n\n\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  var currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = TransactionStatus.RUN;\n    var queueNode = this.transactionQueueTree_.subTree(path);\n    var nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n    queueNode.setValue(nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n\n    var priorityForNode = void 0;\n\n    if (typeof newVal === 'object' && newVal !== null && util.contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = util.safeGet(newVal, '.priority');\n      util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    priorityForNode\n    /** @type {null|number|string} */\n    = priorityForNode;\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    this.sendReadyTransactions_();\n  }\n};\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\n  return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;\n};\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.sendReadyTransactions_ = function (node) {\n  var _this = this;\n\n  if (node === void 0) {\n    node = this.transactionQueueTree_;\n  } // Before recursing, make sure any completed transactions are removed.\n\n\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    var queue = this.buildTransactionQueue_(node);\n    util.assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === TransactionStatus.RUN;\n    }); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(function (childNode) {\n      _this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\n  var _this = this; // Mark transactions as sent and increment retry count!\n\n\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = this.getLatestState_(path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    var relativePath = Path.relativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path; // Send the put.\n\n  this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    _this.log_('transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n\n    var events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n      // the callback could trigger more transactions or sets.\n      var callbacks = [];\n\n      for (var i = 0; i < queue.length; i++) {\n        queue[i].status = TransactionStatus.COMPLETED;\n        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this transaction is complete, it should be set\n          var node = queue[i].currentOutputSnapshotResolved;\n          var ref = new Reference(_this, queue[i].path);\n          var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path)); // There may be pending transactions that we can now send.\n\n\n      _this.sendReadyTransactions_();\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, events); // Finally, trigger onComplete callbacks.\n\n\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n          } else {\n            queue[i].status = TransactionStatus.RUN;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.NEEDS_ABORT;\n          queue[i].abortReason = status;\n        }\n      }\n\n      _this.rerunTransactions_(path);\n    }\n  }, latestHash);\n};\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.rerunTransactions_ = function (changedPath) {\n  var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  var path = rootMostTransactionNode.path();\n  var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n  return path;\n};\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n\n\n  var callbacks = [];\n  var events = []; // Ignore all of the sets we're going to re-run.\n\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n\n  for (var i = 0; i < queue.length; i++) {\n    var transaction = queue[i];\n    var relativePath = Path.relativePath(path, transaction.path);\n    var abortTransaction = false,\n        abortReason = void 0;\n    util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON$1(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && util.contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = this.generateServerValues();\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_(); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED; // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          var ref = new Reference(this, queue[i].path); // We set this field immediately, so it's safe to cast to an actual snapshot\n\n          var lastInput\n          /** @type {!Node} */\n          = queue[i].currentInputSnapshot;\n          var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  this.sendReadyTransactions_();\n};\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\n  var front; // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n\n  var transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n};\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n  var _this = this;\n\n  var nodeQueue = node.getValue();\n\n  if (nodeQueue !== null) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(function (child) {\n    _this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n  var _this = this;\n\n  var queue = node.getValue();\n\n  if (queue) {\n    var to = 0;\n\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(function (childNode) {\n    _this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.abortTransactions_ = function (path) {\n  var _this = this;\n\n  var affectedPath = this.getAncestorTransactionNode_(path).path();\n  var transactionNode = this.transactionQueueTree_.subTree(path);\n  transactionNode.forEachAncestor(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  this.abortTransactionsOnNode_(transactionNode);\n  transactionNode.forEachDescendant(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  return affectedPath;\n};\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\n  var queue = node.getValue();\n\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n\n    var events = [];\n    var lastSent = -1;\n\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;else if (queue[i].status === TransactionStatus.SENT) {\n        util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          var snapshot = null;\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** @const {string} */\n\n\nvar DATABASE_URL_OPTION = 'databaseURL';\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\n\n\nvar RepoManager =\n/** @class */\nfunction () {\n  function RepoManager() {\n    /**\r\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n     */\n    this.repos_ = {};\n    /**\r\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n     * @private {boolean}\r\n     */\n\n    this.useRestClient_ = false;\n  }\n\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n\n    return _staticInstance;\n  }; // TODO(koss): Remove these functions unless used in tests?\n\n\n  RepoManager.prototype.interrupt = function () {\n    var e_1, _a, e_2, _b;\n\n    try {\n      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].interrupt();\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  RepoManager.prototype.resume = function () {\n    var e_3, _a, e_4, _b;\n\n    try {\n      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n\n        try {\n          for (var _e = (e_4 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].resume();\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\r\n   * This function should only ever be called to CREATE a new database instance.\r\n   *\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Database}\r\n   */\n\n\n  RepoManager.prototype.databaseFromApp = function (app, authProvider, url) {\n    var dbUrl = url || app.options[DATABASE_URL_OPTION];\n\n    if (dbUrl === undefined) {\n      fatal(\"Can't determine Firebase Database URL.  Be sure to include \" + DATABASE_URL_OPTION + ' option when calling firebase.initializeApp().');\n    }\n\n    var parsedUrl = parseRepoInfo(dbUrl);\n    var repoInfo = parsedUrl.repoInfo;\n    var dbEmulatorHost = undefined;\n\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\n      parsedUrl = parseRepoInfo(dbUrl);\n      repoInfo = parsedUrl.repoInfo;\n    }\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n\n    if (!parsedUrl.path.isEmpty()) {\n      fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n\n    var repo = this.createRepo(repoInfo, app, authProvider);\n    return repo.database;\n  };\n  /**\r\n   * Remove the repo and make sure it is disconnected.\r\n   *\r\n   * @param {!Repo} repo\r\n   */\n\n\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = util.safeGet(this.repos_, repo.app.name); // This should never happen...\n\n    if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  };\n  /**\r\n   * Ensures a repo doesn't already exist and then creates one using the\r\n   * provided app.\r\n   *\r\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Repo} The Repo object for the specified server / repoName.\r\n   */\n\n\n  RepoManager.prototype.createRepo = function (repoInfo, app, authProvider) {\n    var appRepos = util.safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    var repo = util.safeGet(appRepos, repoInfo.toURLString());\n\n    if (repo) {\n      fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n\n    repo = new Repo(repoInfo, this.useRestClient_, app, authProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\r\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n   * @param {boolean} forceRestClient\r\n   */\n\n\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n\n  return RepoManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   * @param {!Repo} repo_\r\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n\n    if (!(repo_ instanceof Repo)) {\n      fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n\n\n    this.root_ = new Reference(repo_, Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function get() {\n      return this.repo_.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Database.prototype.ref = function (path) {\n    this.checkDeleted_('ref');\n    util.validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @param {string} url\r\n   * @return {!Reference} Firebase reference.\r\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\r\n   * @param {string} apiName\r\n   */\n\n\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    util.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n\n  Database.prototype.goOnline = function () {\n    util.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n  return Database;\n}();\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.database.checkDeleted_('delete'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        RepoManager.getInstance().deleteRepo(this.database.repo_); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        this.database.repo_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return DatabaseInternals;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\n\n\nvar forceLongPolling = function forceLongPolling() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nvar forceWebSockets = function forceWebSockets() {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\n\n\nvar isWebSocketsAvailable = function isWebSocketsAvailable() {\n  return WebSocketConnection['isAvailable']();\n};\n\nvar setSecurityDebugCallback = function setSecurityDebugCallback(ref, callback) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\n\nvar stats = function stats(ref, showDelta) {\n  ref.repo.stats(showDelta);\n};\n\nvar statsIncrementCounter = function statsIncrementCounter(ref, metric) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nvar dataUpdateCount = function dataUpdateCount(ref) {\n  return ref.repo.dataUpdateCount;\n};\n\nvar interceptServerData = function interceptServerData(ref, callback) {\n  return ref.repo.interceptServerData_(callback);\n};\n\nvar INTERNAL =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DataConnection = PersistentConnection;\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nvar RealTimeConnection = Connection;\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\n\nvar hijackHash = function hijackHash(newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\n\n\nvar ConnectionTarget = RepoInfo;\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\n\nvar queryIdentifier = function queryIdentifier(query) {\n  return query.queryIdentifier();\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\n\n\nvar forceRestClient = function forceRestClient(_forceRestClient) {\n  RepoManager.getInstance().forceRestClient(_forceRestClient);\n};\n\nvar TEST_ACCESS =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\nvar name = \"@firebase/database\";\nvar version = \"0.5.21\";\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ServerValue = Database.ServerValue;\n\nfunction registerDatabase(instance) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION); // Register the Database Service with the 'firebase' namespace.\n\n  var namespace = instance.INTERNAL.registerComponent(new component.Component('database', function (container, url) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    return RepoManager.getInstance().databaseFromApp(app, authProvider, url);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps( // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    DataSnapshot: DataSnapshot,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n\n  if (util.isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\nexports.DataSnapshot = DataSnapshot;\nexports.Database = Database;\nexports.OnDisconnect = OnDisconnect;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.ServerValue = ServerValue;\nexports.enableLogging = enableLogging;\nexports.registerDatabase = registerDatabase;","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nexport { _assign as __assign };\nexport function __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nexport function __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nexport function __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nexport function __exportStar(m, exports) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\nexport function __values(o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n}\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n}\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n;\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: n === \"return\"\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n;\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result.default = mod;\n  return result;\n}\nexport function __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}","import '@firebase/database';"],"sourceRoot":""}